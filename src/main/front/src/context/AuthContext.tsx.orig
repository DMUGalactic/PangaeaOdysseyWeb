<<<<<<< HEAD
import React, { createContext, useContext, useState, ReactNode } from "react";
=======
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
>>>>>>> 3b9a1c71586a1b3887118976ecc1588e96abf47b

interface AuthContextType {
  isLoggedIn: boolean;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

<<<<<<< HEAD
export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(!!localStorage.getItem("accessToken"));
=======
interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(() => {
    return !!localStorage.getItem('accessToken');
  });
>>>>>>> 3b9a1c71586a1b3887118976ecc1588e96abf47b

  const login = () => {
    setIsLoggedIn(true);
  };

  const logout = () => {
<<<<<<< HEAD
    // 로그아웃 시 모든 토큰 삭제
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    setIsLoggedIn(false);
  };

=======
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    setIsLoggedIn(false);
  };

  // OAuth2 로그인 후 페이지가 리다이렉트되었을 때도 로그인 상태를 유지하도록 설정
  useEffect(() => {
    if (localStorage.getItem('accessToken')) {
      setIsLoggedIn(true);
    }
  }, []);

>>>>>>> 3b9a1c71586a1b3887118976ecc1588e96abf47b
  return (
    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

<<<<<<< HEAD
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
=======
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
>>>>>>> 3b9a1c71586a1b3887118976ecc1588e96abf47b
  }
  return context;
};
